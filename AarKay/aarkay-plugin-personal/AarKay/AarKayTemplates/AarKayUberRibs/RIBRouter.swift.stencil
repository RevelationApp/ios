import RIBs
{% if routeTypes %}

enum {{name}}RouteType {
    {% for routeType in routeTypes %}
    case {{routeType}}
    {% endfor %}
}
{% endif %}

protocol {{name}}Routing: {% if isRoot %}Launch{% else %}{% if viewable %}Viewable{% endif %}{% endif %}Routing {
    {% for child in children %}
    func routeTo{{child.name}}({% if child.routeTypes %}routeType: {{child.name}}RouteType{% if child.allDeps %}, {% endif %}{% endif %}{% for dep in child.allDeps %}{{dep.name}}: {{dep.type}}{% if not forloop.last %}, {% endif %}{% endfor %})
    func detach{{child.name}}()
    {% endfor %}
    /// <aarkay {{name}}Routing>
    /// </aarkay>
}

final class {{name}}Router: {% if isRoot %}Launch{% else %}{% if viewable %}Viewable{% endif %}{% endif %}Router<{{name}}Interactable{% if viewable %}, ViewControllable{% endif %}>, {{name}}Routing {

    // swiftlint:disable implicitly_unwrapped_optional
    private var {{name|lowerFirstWord}}Interactor: {{name}}Interactable!
    // swiftlint:enable implicitly_unwrapped_optional
    {% if children %}

    {% for child in children %}
    private let {{child.name|lowerFirstWord}}Builder: {{child.name}}Buildable
    private var {{child.name|lowerFirstWord}}Routing: {{child.name}}Routing!
    {% endfor %}
    {% endif %}

    {% if not children %}override {% endif %}init(interactor: {{name}}Interactable{% if viewable %}, viewController: ViewControllable{% endif %}{% for child in children %}, {{child.name|lowerFirstWord}}Builder: {{child.name}}Buildable{% endfor %}) {
        {% for child in children %}
        self.{{child.name|lowerFirstWord}}Builder = {{child.name|lowerFirstWord}}Builder
        {% endfor %}
        self.{{name|lowerFirstWord}}Interactor = interactor
        super.init(interactor: interactor{% if viewable %}, viewController: viewController{% endif %})
        interactor.router = self
    }

    {% for child in children %}
    
    // MARK: - {{child.name}}

    func routeTo{{child.name}}({% if child.routeTypes %}routeType: {{child.name}}RouteType{% if child.allDeps %}, {% endif %}{% endif %}{% for dep in child.allDeps %}{{dep.name}}: {{dep.type}}{% if not forloop.last %}, {% endif %}{% endfor %}) {
        {{child.name|lowerFirstWord}}Routing = {{child.name|lowerFirstWord}}Builder.build(with: interactor, rootViewController: {{name|lowerFirstWord}}Interactor.rootViewController{% for dep in child.allDeps %}, {{dep.name}}: {{dep.name}}{% endfor %})
        attachChild({{child.name|lowerFirstWord}}Routing)
        /// <aarkay routeTo{{child.name}}>
        /// </aarkay>
    }

    func detach{{child.name}}() {
        detachChild({{child.name|lowerFirstWord}}Routing)
        {{child.name|lowerFirstWord}}Routing = nil
    }

    {% endfor %}
    
}
