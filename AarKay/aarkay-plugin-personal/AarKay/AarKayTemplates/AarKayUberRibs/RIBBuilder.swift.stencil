import RIBs

protocol {{name}}Dependency: Dependency {
    {% for dep in deps %}
    var {{dep.name}}: {{dep.type}} { get }
    {% endfor %}
}

final class {{name}}Component: Component<{{name}}Dependency>{% for child in children %}, {{child.name}}Dependency{% endfor %} {
    {% if isRoot %}

    var rootViewController: UIViewController = {
        let storyboard = UIStoryboard(name: "LaunchScreen", bundle: nil)
        return storyboard.instantiateInitialViewController()!
    }()
    {% endif %}
    {% for dep in deps %}

    {% if dep.value %}
    var {{dep.name}}: {{dep.type}} = {{dep.value}}
    {% else %}
    var {{dep.name}}: {{dep.type}} {
        return dependency.{{dep.name}}
    }
    {% endif %}
    {% endfor %}
    {% if allDeps %}

    {% for dep in allDeps %}
    let {{dep.name}}: {{dep.type}}
    {% endfor %}

    init(dependency: {{name}}Dependency{% for dep in allDeps %}, {{dep.name}}: {{dep.type}}{% endfor %}) {
        {% for dep in allDeps %}
        self.{{dep.name}} = {{dep.name}}
        {% endfor %}
        super.init(dependency: dependency)
    }
    {% endif %}

}

protocol {{name}}Buildable: Buildable {
    func build({% if not isRoot %}with listener: {{name}}Listener, rootViewController: UIViewController{% if allDeps %}, {% endif %}{% endif %}{% for dep in allDeps %}{{dep.name}}: {{dep.type}}{% if not forloop.last %}, {% endif %}{% endfor %}) -> {{name}}Routing
}

final class {{name}}Builder: Builder<{{name}}Dependency>, {{name}}Buildable {

    func build({% if not isRoot %}with listener: {{name}}Listener, rootViewController: UIViewController{% if allDeps %}, {% endif %}{% endif %}{% for dep in allDeps %}{{dep.name}}: {{dep.type}}{% if not forloop.last %}, {% endif %}{% endfor %}) -> {{name}}Routing {
        {% if children or isRoot %}
        let component = {{name}}Component(dependency: dependency{% for dep in allDeps %}, {{dep.name}}: {{dep.name}}{% endfor %})
        {% for child in children %}
        let {{child.name|lowerFirstWord}}Builder = {{child.name}}Builder(dependency: component)
        {% endfor %}
        {% endif %}
        {% if isRoot %}
        let viewController = component.rootViewController
        {% elif not viewable %}
        let viewController = rootViewController
        {% elif vcable %}
        let viewController = {{vcable}}ViewController()
        {% elif sb %}
        let storyboard = UIStoryboard(name: "{{name}}", bundle: nil)
        let viewController = storyboard.instantiateInitialViewController() as! {{name}}ViewController
        {% else %}
        let viewController = {{name}}ViewController()
        {% endif %}
        {% for dep in depsVC %}
        viewController.{{dep.name}} = {{dep.name}}
        {% endfor %}
        {% if not viewable or isRoot %}
        let interactor = {{name}}Interactor()
        {% else %}
        let interactor = {{name}}Interactor(presenter: viewController)
        {% endif %}
        interactor.dependency = dependency
        {% if not isRoot %}
        interactor.listener = listener
        {% endif %}
        interactor.rootViewController = viewController
        {% for dep in depsIR %}
        interactor.{{dep.name}} = {{dep.name}}
        {% endfor %}
        return {{name}}Router(interactor: interactor{% if viewable %}, viewController: viewController{% endif %}{% for child in children %}, {{child.name|lowerFirstWord}}Builder: {{child.name|lowerFirstWord}}Builder{% endfor %})
    }

}
