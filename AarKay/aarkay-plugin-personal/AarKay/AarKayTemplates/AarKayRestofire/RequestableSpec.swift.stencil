//     _____                  ____  __.
//    /  _  \ _____ _______  |    |/ _|____  ___.__.
//   /  /_\  \\__  \\_  __ \ |      < \__  \<   |  |
//  /    |    \/ __ \|  | \/ |    |  \ / __ \\___  |
//  \____|__  (____  /__|    |____|__ (____  / ____|
//          \/     \/                \/    \/\/
//
//  Generated by AarKay on 27/12/18.
//  Copyright Â© 2018 RahulKatariya. All rights reserved.
//

import Foundation
import Quick
import Nimble
import Restofire
import Alamofire
@testable import {{ apiModuleName }}

class {{ name }}{{ method|uppercase }}ServiceSpec: {{ apiModuleName }}Spec {
    override func spec() {
        super.spec()
        describe("{{ name }}{{ method|uppercase }}Service") {
            {% for test in allTests %}
            it("request should succeed") {
                // Given
                waitUntil(timeout: self.timeout) { done in
                    {% if test.testQueryModel %}

                    let queryString =
                    """
                    {{ test.testQueryModel }}
                    """
                    let queryData = queryString.data(using: .utf8)!
                    let queryModel = try! JSONDecoder().decode({{ name }}RequestModel.self, from: queryData)
                    {% endif %}
                    {% if test.testRequestModel %}

                    let requestString =
                    """
                    {{ test.testRequestModel }}
                    """
                    let requestData = requestString.data(using: .utf8)!
                    let requestModel = try! JSONDecoder().decode({{ name }}RequestModel.self, from: requestData)
                    {% endif %}

                    let request = {{ name }}{{ method|uppercase }}Service({{ test.testInitParams }})

                    // When
                    do {
                        let operation = try request.execute { value, response in
                            defer { done() }

                            // Then
                            if let statusCode = response.response?.statusCode,
                                statusCode != 200 {
                                fail("Response status code should be 200")
                            }

                            expect(value).toNot(beNil())
                            expect(response.request).toNot(beNil())
                            expect(response.response).toNot(beNil())
                            expect(response.data).toNot(beNil())
                            expect(response.error).to(beNil())

                            print(response.result.value ?? "None")

                        }
                    } catch {
                        fail(error.localizedDescription)
                    }
                }
            }
            {% endfor %}
        }
    }
}
